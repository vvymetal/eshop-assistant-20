{
  "chat-widget-package/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\">\n    <title>Chat Widget Demo</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/demo.jsx\"></script>\n  </body>\n</html>",
  "chat-widget-package/index.js": "import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport ChatWidget from '../src/ChatWidget'; // Upravte cestu podle vaší struktury projektu\n\n// Tato funkce může být volána pro renderování ChatWidget komponenty\nexport function renderChatWidget(containerId, props) {\n  const container = document.getElementById(containerId);\n  if (container) {\n    const root = createRoot(container);\n    root.render(<ChatWidget {...props} />);\n  } else {\n    console.error(`Container with id \"${containerId}\" not found`);\n  }\n}\n\n// Exportujeme také samotnou komponentu pro případné použití v jiných React aplikacích\nexport { default as ChatWidget } from '../src/ChatWidget';",
  "chat-widget-package/vite.config.js": "import { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    lib: {\n      entry: path.resolve(__dirname, 'src/ChatWidget.jsx'),\n      name: 'ChatWidget',\n      fileName: (format) => `chat-widget.${format}.js`\n    },\n    rollupOptions: {\n        external: ['react', 'react-dom', 'antd', '@ant-design/icons'],\n        output: {\n          globals: {\n            react: 'React',\n            'react-dom': 'ReactDOM',\n            antd: 'antd',\n            '@ant-design/icons': 'AntDesignIcons'\n          }\n        }\n      }\n  }\n});",
  "chat-widget-package/src/demo (kopie).jsx": "// src/demo.jsx\nimport { createRoot } from 'react-dom/client';\nimport { ConfigProvider } from 'antd';\nimport ChatWidget from './components/ChatWidget/ChatWidget';\nimport { ChatProvider } from './contexts/ChatContext.jsx';\nimport { CartProvider } from './contexts/CartContext.jsx';\nimport { SettingsProvider } from './contexts/SettingsContext.jsx';\nimport { ChatIdProvider, useChatId } from './contexts/ChatIdContext.jsx';\nimport { API_BASE_URL } from './config/constants';\n\nconst AppContent = () => {\n  const chatId = useChatId();\n\n  return (\n    <ChatProvider apiEndpoint={API_BASE_URL}>\n      <CartProvider \n        apiEndpoint={API_BASE_URL}\n        onAddToCart={(cart) => console.log('Added to cart:', cart)}\n        chatId={chatId}\n      >\n        <SettingsProvider>\n          <ChatWidget \n            apiEndpoint={API_BASE_URL}\n            onAddToCart={(cart) => console.log('Added to cart:', cart)}\n          />\n        </SettingsProvider>\n      </CartProvider>\n    </ChatProvider>\n  );\n};\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <ConfigProvider>\n    <ChatIdProvider>\n      <AppContent />\n    </ChatIdProvider>\n  </ConfigProvider>\n);",
  "chat-widget-package/src/ErrorBoundary.jsx": "import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('Error caught by ErrorBoundary:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong. Please try again later.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;",
  "chat-widget-package/src/ChatWidget.css": "/* ChatWidget.css */\n.chat-widget {\n  display: flex;\n  height: 100vh;\n  background-color: #f3f4f6;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n}\n\n.chat-column {\n  flex: 2;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #e5e7eb;\n  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);\n}\n\n.cart-column {\n  flex: 1;\n  padding: 1rem;\n  background-color: #ffffff;\n  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease-in-out;\n}\n\n.cart-column.minimized {\n  transform: translateX(calc(100% - 60px));\n}\n\n.chat-header, .cart-header {\n  padding: 1rem;\n  background-color: #ffffff;\n  border-bottom: 1px solid #e5e7eb;\n  font-weight: bold;\n  font-size: 1.25rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.chat-messages {\n  flex: 1;\n  overflow-y: auto;\n  padding: 1rem;\n}\n\n.message {\n  max-width: 75%;\n  padding: 0.75rem 1rem;\n  margin-bottom: 1rem;\n  border-radius: 1rem;\n  position: relative;\n}\n\n.message.user {\n  background-color: #e6f7ff;\n  margin-left: auto;\n  border-bottom-right-radius: 0;\n}\n\n.message.assistant {\n  background-color: #f0f0f0;\n  margin-right: auto;\n  border-bottom-left-radius: 0;\n}\n\n.avatar {\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  position: absolute;\n  bottom: -5px;\n}\n\n.user .avatar {\n  right: -40px;\n}\n\n.assistant .avatar {\n  left: -40px;\n}\n\n.chat-input {\n  padding: 1rem;\n  background-color: #ffffff;\n  border-top: 1px solid #e5e7eb;\n}\n\n.input-area {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.input-field {\n  flex-grow: 1;\n  padding: 0.75rem;\n  border: 1px solid #d1d5db;\n  border-radius: 0.5rem;\n  font-size: 1rem;\n}\n\n.send-button, .speech-button, .settings-button {\n  padding: 0.75rem;\n  background-color: #3b82f6;\n  color: #ffffff;\n  border: none;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: background-color 0.2s, transform 0.1s;\n}\n\n.send-button:hover, .speech-button:hover, .settings-button:hover {\n  background-color: #2563eb;\n  transform: scale(1.05);\n}\n\n.cart-items {\n  overflow-y: auto;\n  max-height: calc(100vh - 250px);\n}\n\n.cart-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.75rem 0;\n  border-bottom: 1px solid #e5e7eb;\n}\n\n.item-details {\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n}\n\n.item-image {\n  width: 40px;\n  height: 40px;\n  object-fit: cover;\n  margin-right: 0.75rem;\n  border-radius: 0.25rem;\n}\n\n.item-info {\n  flex-grow: 1;\n}\n\n.item-actions {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.quantity-button, .remove-button {\n  padding: 0.25rem 0.5rem;\n  background-color: #f3f4f6;\n  border: 1px solid #d1d5db;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  transition: background-color 0.2s, transform 0.1s;\n}\n\n.quantity-button:hover, .remove-button:hover {\n  background-color: #e5e7eb;\n  transform: scale(1.05);\n}\n\n.checkout-button {\n  width: 100%;\n  padding: 0.75rem;\n  background-color: #10b981;\n  color: #ffffff;\n  border: none;\n  border-radius: 0.5rem;\n  font-weight: bold;\n  cursor: pointer;\n  transition: background-color 0.2s, transform 0.1s;\n  margin-top: 1rem;\n}\n\n.checkout-button:hover {\n  background-color: #059669;\n  transform: scale(1.02);\n}\n\n.cart-summary {\n  background-color: #f9fafb;\n  padding: 1rem;\n  border-radius: 0.5rem;\n  margin-bottom: 1rem;\n}\n\n.dark-mode {\n  background-color: #1f2937;\n  color: #f3f4f6;\n}\n\n.dark-mode .chat-column,\n.dark-mode .cart-column,\n.dark-mode .chat-header,\n.dark-mode .cart-header,\n.dark-mode .chat-input,\n.dark-mode .input-field {\n  background-color: #374151;\n  border-color: #4b5563;\n}\n\n.dark-mode .message.user {\n  background-color: #3b82f6;\n  color: #ffffff;\n}\n\n.dark-mode .message.assistant {\n  background-color: #6b7280;\n  color: #ffffff;\n}\n\n@media (max-width: 768px) {\n  .chat-widget {\n    flex-direction: column;\n  }\n\n  .chat-column, .cart-column {\n    flex: none;\n    width: 100%;\n  }\n\n  .cart-column {\n    border-top: 1px solid #e5e7eb;\n    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);\n  }\n}\n\n@keyframes typing {\n  0% { opacity: 0.3; }\n  50% { opacity: 1; }\n  100% { opacity: 0.3; }\n}\n\n.typing-indicator {\n  display: flex;\n  padding: 0.5rem;\n  gap: 0.25rem;\n}\n\n.typing-indicator span {\n  width: 8px;\n  height: 8px;\n  background-color: #6b7280;\n  border-radius: 50%;\n  animation: typing 1.4s infinite;\n}\n\n.typing-indicator span:nth-child(2) {\n  animation-delay: 0.2s;\n}\n\n.typing-indicator span:nth-child(3) {\n  animation-delay: 0.4s;\n}",
  "chat-widget-package/src/quiz.jsx": "import React from 'react';\n\nconst Quiz = ({ quizData }) => {\n  // Zde bude v budoucnu implementována logika kvízu\n  return (\n    <div className=\"quiz-container\">\n      <h2>Quiz</h2>\n      <p>Quiz component is ready for implementation.</p>\n      {/* \n        Zde můžeme později přidat:\n        - Zobrazení otázek\n        - Možnosti odpovědí\n        - Logiku pro hodnocení odpovědí\n        - Tlačítka pro navigaci mezi otázkami\n        - Zobrazení výsledků\n      */}\n    </div>\n  );\n};\n\nexport default Quiz;",
  "chat-widget-package/src/index.js": "\nexport { default as ChatWidget } from './ChatWidget';",
  "chat-widget-package/src/README.md": "",
  "chat-widget-package/src/ChatWidget.jsx": "import React, { useState, useEffect, useRef, useCallback, useMemo, Suspense } from 'react';\nimport { Button, Input, List, Card, Image, Modal, Select, message, Tooltip } from 'antd';\nimport { ShoppingCartOutlined, SendOutlined, AudioOutlined, PlusOutlined, MinusOutlined, DeleteOutlined, SettingOutlined, RightOutlined, LeftOutlined } from '@ant-design/icons';\nimport { v4 as uuidv4 } from 'uuid';\nimport ReactMarkdown from 'react-markdown';\nimport ErrorBoundary from './ErrorBoundary';\n\nimport './ChatWidget.css';\n\nconst { Option } = Select;\n\nconst Quiz = React.lazy(() => import('./Quiz'));\n\nconst Message = React.memo(({ content, role }) => (\n  <div className={`message ${role}`} role=\"listitem\">\n    <ReactMarkdown>{content || ''}</ReactMarkdown>\n  </div>\n));\n\nconst CartItem = React.memo(({ item, onUpdateQuantity, onRemove }) => (\n  <div className=\"cart-item\" role=\"listitem\">\n    <div className=\"item-details\">\n      <p>{item.name || 'Unnamed product'} - {item.price ? `$${item.price}` : 'N/A'}</p>\n      <p>{item.quantity}x ${(item.price * item.quantity).toFixed(2)}</p>\n    </div>\n    <div className=\"item-actions\">\n      <Button icon={<MinusOutlined />} onClick={() => onUpdateQuantity(item.product_id, item.quantity - 1)} aria-label={`Decrease quantity of ${item.name}`} />\n      <Button icon={<PlusOutlined />} onClick={() => onUpdateQuantity(item.product_id, item.quantity + 1)} aria-label={`Increase quantity of ${item.name}`} />\n      <Button icon={<DeleteOutlined />} onClick={() => onRemove(item.product_id)} aria-label={`Remove ${item.name} from cart`} />\n    </div>\n  </div>\n));\n\nconst ChatWidget = ({ apiEndpoint, onAddToCart, customStyles = {} }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [workingCart, setWorkingCart] = useState([]);\n  const [quizData, setQuizData] = useState(null);\n  const [showQuiz, setShowQuiz] = useState(false);\n  const [chatId, setChatId] = useState(null);\n  const [showCart, setShowCart] = useState(false);\n  const [voices, setVoices] = useState([]);\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [isCartLoading, setIsCartLoading] = useState(true);\n  const [isCartMinimized, setIsCartMinimized] = useState(false);\n  const [cartSummary, setCartSummary] = useState({ totalItems: 0, totalPrice: 0, discount: 0, finalPrice: 0, saved: 0 });\n  const [showSettings, setShowSettings] = useState(false);\n  const chatEndRef = useRef(null);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  useEffect(() => {\n    const initializeChatId = () => {\n      try {\n        let storedChatId = localStorage.getItem('chatId') || sessionStorage.getItem('chatId');\n        if (storedChatId) {\n          console.log('Retrieved existing chatId:', storedChatId);\n          setChatId(storedChatId);\n        } else {\n          const newChatId = uuidv4();\n          console.log('Created new chatId:', newChatId);\n          try {\n            localStorage.setItem('chatId', newChatId);\n          } catch (e) {\n            sessionStorage.setItem('chatId', newChatId);\n          }\n          setChatId(newChatId);\n        }\n      } catch (error) {\n        console.error('Error accessing storage:', error);\n        const fallbackChatId = uuidv4();\n        console.log('Using fallback chatId:', fallbackChatId);\n        setChatId(fallbackChatId);\n      }\n    };\n\n    initializeChatId();\n    console.log('ChatWidget initialized with endpoint:', apiEndpoint);\n\n    const synth = window.speechSynthesis;\n    const loadVoices = () => {\n      const availableVoices = synth.getVoices();\n      setVoices(availableVoices.filter(voice => voice.lang.startsWith('cs') || voice.lang.startsWith('en')));\n    };\n    loadVoices();\n    if (synth.onvoiceschanged !== undefined) {\n      synth.onvoiceschanged = loadVoices;\n    }\n  }, [apiEndpoint]);\n\n  const fetchLatestMessages = useCallback(async () => {\n    if (!chatId) {\n      console.log('ChatId not initialized yet');\n      return;\n    }\n    try {\n      console.log('Fetching messages for chatId:', chatId);\n      const response = await fetch(`${apiEndpoint}/chat/${chatId}/latest-messages`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Fetched messages:', data);\n      setMessages(data.messages || []);\n    } catch (error) {\n      console.error('Error fetching latest messages:', error);\n      setMessages([]);\n    }\n  }, [apiEndpoint, chatId]);\n\n  const fetchCart = useCallback(async () => {\n    if (!chatId) {\n      console.log('ChatId not initialized yet');\n      return;\n    }\n    setIsCartLoading(true);\n    try {\n      console.log('Fetching cart for chatId:', chatId);\n      const response = await fetch(`${apiEndpoint}/cart/${chatId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const cartData = await response.json();\n      console.log('Fetched cart data:', cartData);\n      if (cartData && cartData.data) {\n        const cartItems = Array.isArray(cartData.data) ? cartData.data : [cartData.data];\n        setWorkingCart(cartItems);\n      } else {\n        console.warn('Received cart data is not in expected format:', cartData);\n        setWorkingCart([]);\n      }\n    } catch (error) {\n      console.error('Error fetching cart:', error);\n      setWorkingCart([]);\n    } finally {\n      setIsCartLoading(false);\n    }\n  }, [apiEndpoint, chatId]);\n\n  useEffect(() => {\n    if (chatId) {\n      Promise.all([fetchLatestMessages(), fetchCart()])\n        .finally(() => setIsInitializing(false));\n    }\n  }, [chatId, fetchLatestMessages, fetchCart]);\n\n  useEffect(() => {\n    console.log('Working cart updated:', workingCart);\n    updateCartSummary();\n  }, [workingCart]);\n\n  const updateCartSummary = useCallback(() => {\n    const totalItems = workingCart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = workingCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    // Assume discount logic here - this should be implemented based on your business rules\n    const discount = 0; // For now, we're not applying any discount\n    const finalPrice = totalPrice - discount;\n    const saved = totalPrice - finalPrice;\n\n    setCartSummary({ totalItems, totalPrice, discount, finalPrice, saved });\n  }, [workingCart]);\n\n  const updateWorkingCart = useCallback((cartAction) => {\n    console.log('Updating cart with action:', cartAction);\n\n    let parsedAction;\n    try {\n      parsedAction = typeof cartAction === 'string' ? JSON.parse(cartAction) : cartAction;\n    } catch (error) {\n      console.error('Chyba při parsování cartAction:', error);\n      return;\n    }\n\n    console.log('Zpracování akce košíku:', parsedAction);\n\n    if (!parsedAction || typeof parsedAction !== 'object') {\n      console.error('Neplatná struktura cartAction');\n      return;\n    }\n\n    const { status, product_id, name, price, quantity } = parsedAction;\n\n    setWorkingCart(prevCart => {\n      const updatedCart = [...prevCart];\n\n      switch (status) {\n        case 'removed':\n          return updatedCart.filter(item => item.product_id !== product_id);\n        case 'added':\n        case 'updated':\n          const existingItemIndex = updatedCart.findIndex(item => item.product_id === product_id);\n          if (existingItemIndex !== -1) {\n            updatedCart[existingItemIndex] = {\n              ...updatedCart[existingItemIndex],\n              quantity: quantity ?? updatedCart[existingItemIndex].quantity + 1,\n              name: name || updatedCart[existingItemIndex].name,\n              price: price ?? updatedCart[existingItemIndex].price\n            };\n          } else {\n            updatedCart.push({\n              product_id,\n              name: name || 'Unnamed product',\n              price: price ?? 'N/A',\n              quantity: quantity ?? 1\n            });\n          }\n          return updatedCart;\n        case 'cleared':\n          return [];\n        default:\n          console.warn(`Neznámá akce košíku: ${status}`);\n          return prevCart;\n      }\n    });\n\n    // Zobrazení notifikace o změně košíku\n    switch (status) {\n      case 'removed':\n        message.success(`Položka ${product_id} odebrána z košíku`);\n        break;\n      case 'added':\n      case 'updated':\n        message.success(`Položka ${name || product_id} přidána/aktualizována v košíku`);\n        break;\n      case 'cleared':\n        message.success('Košík byl vyčištěn');\n        break;\n    }\n\n    // Synchronizace s backendem\n    fetch(`${apiEndpoint}/cart/${chatId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(parsedAction),\n    })\n    .then(response => {\n      if (!response.ok) throw new Error('Failed to update cart on server');\n      return response.json();\n    })\n    .then(updatedCart => {\n      console.log('Cart updated on server:', updatedCart);\n      if (updatedCart && updatedCart.data) {\n        const cartItems = Array.isArray(updatedCart.data) ? updatedCart.data : [updatedCart.data];\n        setWorkingCart(cartItems);\n      } else {\n        console.warn('Received updated cart data is not in expected format:', updatedCart);\n      }\n    })\n    .catch(error => console.error('Error updating cart on server:', error));\n\n    console.log('Aktualizace košíku dokončena');\n  }, [chatId, apiEndpoint]);\n\n  const sendMessage = useCallback(async () => {\n    if (inputMessage.trim() !== '') {\n      console.log('Odesílání zprávy:', inputMessage);\n      setMessages(prevMessages => [...prevMessages, { role: 'user', content: inputMessage }]);\n      setInputMessage('');\n      setIsLoading(true);\n\n      try {\n        console.log('Volání API:', `${apiEndpoint}/chat/${chatId}`);\n        const response = await retryFetch(`${apiEndpoint}/chat/${chatId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ user_query: inputMessage }),\n        });\n\n        console.log('API odpověď status:', response.status);\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n\n        let accumulatedResponse = '';\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n          const chunk = decoder.decode(value, { stream: true });\n          console.log('Přijatý chunk:', chunk);\n\n          accumulatedResponse += chunk;\n          const lines = accumulatedResponse.split('\\n');\n          accumulatedResponse = lines.pop();\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const jsonData = line.slice(5);\n              try {\n                const parsedData = JSON.parse(jsonData);\n                if (parsedData.text?.value) {\n                  setMessages(prevMessages => {\n                    const lastMessage = prevMessages[prevMessages.length - 1];\n                    if (lastMessage && lastMessage.role === 'assistant') {\n                      const updatedMessages = [...prevMessages];\n                      updatedMessages[updatedMessages.length - 1] = {\n                        ...lastMessage,\n                        content: lastMessage.content + parsedData.text.value\n                      };\n                      return updatedMessages;\n                    } else {\n                      return [...prevMessages, { role: 'assistant', content: parsedData.text.value }];\n                    }\n                  });\n                }\n                if (parsedData.cart_action) {\n                  try {\n                    const cartAction = typeof parsedData.cart_action === 'string' \n                      ? JSON.parse(parsedData.cart_action) \n                      : parsedData.cart_action;\n                    console.log('Processed cart_action:', cartAction);  \n                    updateWorkingCart(cartAction);\n                  } catch (error) {\n                    console.error('Chyba při zpracování cart_action:', error);\n                  }\n                }\n              } catch (error) {\n                console.error('Chyba při parsování JSON:', error);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Chyba při odesílání zprávy:', error);\n        setMessages(prevMessages => [...prevMessages, { role: 'error', content: 'Došlo k chybě při komunikaci se serverem.' }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [inputMessage, chatId, apiEndpoint, updateWorkingCart]);\n\n  const retryFetch = useCallback(async (url, options, retries = 3) => {\n    try {\n      return await fetch(url, options);\n    } catch (err) {\n      if (retries > 0) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return retryFetch(url, options, retries - 1);\n      }\n      throw err;\n    }\n  }, []);\n\n  const updateItemQuantity = useCallback((productId, newQuantity) => {\n    if (newQuantity > 0) {updateWorkingCart({ status: 'updated', product_id: productId, quantity: newQuantity });\n  } else {\n    removeFromCart(productId);\n  }\n}, [updateWorkingCart]);\n\nconst removeFromCart = useCallback((productId) => {\n  updateWorkingCart({ status: 'removed', product_id: productId });\n}, [updateWorkingCart]);\n\nconst handleCheckout = useCallback(() => {\n  if (workingCart.length === 0) {\n    message.warning('Košík je prázdný');\n    return;\n  }\n  onAddToCart(workingCart);\n  message.success('Položky byly úspěšně přidány do hlavního košíku!');\n}, [workingCart, onAddToCart]);\n\nconst speakText = useCallback((text) => {\n  if ('speechSynthesis' in window) {\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (selectedVoice) {\n      utterance.voice = selectedVoice;\n    }\n    window.speechSynthesis.speak(utterance);\n  }\n}, [selectedVoice]);\n\nconst startListening = useCallback(() => {\n  if ('webkitSpeechRecognition' in window) {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'cs-CZ';\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setInputMessage(transcript);\n    };\n    recognition.start();\n    setIsListening(true);\n    recognition.onend = () => setIsListening(false);\n  } else {\n    message.error('Speech recognition is not supported in your browser.');\n  }\n}, []);\n\nconst memoizedVoiceOptions = useMemo(() => \n  voices.map((voice) => (\n    <Option key={voice.name} value={voice.name}>{voice.name}</Option>\n  ))\n, [voices]);\n\nconst memoizedMessages = useMemo(() => \n  messages && messages.length ? messages.map((message, index) => (\n    <Message key={index} content={message.content} role={message.role} />\n  )) : []\n, [messages]);\n\nconst memoizedCartItems = useMemo(() => \n  Array.isArray(workingCart) && workingCart.length \n    ? workingCart.map((item) => (\n        <CartItem \n          key={item.product_id} \n          item={item} \n          onUpdateQuantity={updateItemQuantity}\n          onRemove={removeFromCart}\n        />\n      )) \n    : <p>Váš košík je prázdný.</p>\n, [workingCart, updateItemQuantity, removeFromCart]);\n\nconst toggleCartMinimize = () => {\n  setIsCartMinimized(!isCartMinimized);\n};\n\nconst addCommonResponse = (response) => {\n  setInputMessage(response);\n  sendMessage();\n};\n\nconst openSettings = () => {\n  setShowSettings(true);\n};\n\nconst closeSettings = () => {\n  setShowSettings(false);\n};\n\nif (isInitializing) {\n  return <div>Initializing chat...</div>;\n}\n\nreturn (\n  <ErrorBoundary>\n    <div className=\"chat-widget\" style={customStyles}>\n      <div className=\"chat-column\">\n        <div className=\"chat-header\">Chat with Assistant</div>\n        <div className=\"chat-messages\" role=\"list\">\n          {memoizedMessages}\n          <div ref={chatEndRef} />\n        </div>\n        <div className=\"chat-input\">\n          <div className=\"input-area\">\n            <Input\n              className=\"input-field\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              onPressEnter={sendMessage}\n              placeholder=\"Type a message...\"\n              disabled={isLoading}\n              aria-label=\"Message input\"\n            />\n            <Tooltip title=\"Send message\">\n              <Button className=\"send-button\" onClick={sendMessage} icon={<SendOutlined />} loading={isLoading} aria-label=\"Send message\" />\n            </Tooltip>\n            <Tooltip title={isListening ? \"Listening...\" : \"Start voice input\"}>\n              <Button className=\"speech-button\" onClick={startListening} icon={<AudioOutlined />} loading={isListening} aria-label=\"Start voice input\" />\n            </Tooltip>\n          </div>\n          <div className=\"common-responses\">\n            <Button onClick={() => addCommonResponse(\"Yes, add to cart\")}>Yes, add to cart</Button>\n            <Button onClick={() => addCommonResponse(\"Start new conversation\")}>Start new conversation</Button>\n          </div>\n        </div>\n      </div>\n      <div className={`cart-column ${isCartMinimized ? 'minimized' : ''}`}>\n        <div className=\"cart-header\">\n          Working Cart\n          <Tooltip title={isCartMinimized ? \"Expand cart\" : \"Minimize cart\"}>\n            <Button \n              className=\"minimize-button\" \n              icon={isCartMinimized ? <LeftOutlined /> : <RightOutlined />} \n              onClick={toggleCartMinimize} \n              aria-label={isCartMinimized ? \"Expand cart\" : \"Minimize cart\"}\n            />\n          </Tooltip>\n          <Tooltip title=\"Open settings\">\n            <Button className=\"settings-button\" icon={<SettingOutlined />} onClick={openSettings} aria-label=\"Open settings\" />\n          </Tooltip>\n        </div>\n        {!isCartMinimized && (\n          <div className=\"cart-items\" role=\"list\">\n            {isCartLoading ? (\n              <p>Loading cart...</p>\n            ) : (\n              memoizedCartItems\n            )}\n          </div>\n        )}\n        <div className=\"cart-summary\">\n          <p>Items: {cartSummary.totalItems}</p>\n          <p>Total: ${cartSummary.totalPrice.toFixed(2)}</p>\n          <p>Discount: ${cartSummary.discount.toFixed(2)}</p>\n          <p>Final Price: ${cartSummary.finalPrice.toFixed(2)}</p>\n          <p>You save: ${cartSummary.saved.toFixed(2)}</p>\n        </div>\n        <Button className=\"checkout-button\" onClick={handleCheckout} aria-label=\"Buy in e-shop\">\n          Buy in e-shop ({cartSummary.totalItems} items)\n        </Button>\n      </div>\n      <Modal\n        title=\"Settings\"\n        visible={showSettings}\n        onCancel={closeSettings}\n        footer={null}\n      >\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"Select a voice\"\n          onChange={(value) => setSelectedVoice(voices.find(v => v.name === value))}\n          aria-label=\"Select voice for text-to-speech\"\n        >\n          {memoizedVoiceOptions}\n        </Select>\n      </Modal>\n      <Suspense fallback={<div>Loading quiz...</div>}>\n        {showQuiz && <Quiz quizData={quizData} />}\n      </Suspense>\n    </div>\n  </ErrorBoundary>\n);\n};\n\nexport default React.memo(ChatWidget);",
  "chat-widget-package/src/App.jsx": "",
  "chat-widget-package/src/index.jsx": "",
  "chat-widget-package/src/demo.jsx": "// src/demo.jsx\nimport { createRoot } from 'react-dom/client';\nimport { ConfigProvider } from 'antd';\nimport ChatWidget from '../src/ChatWidget';\nimport { ChatProvider } from './contexts/ChatContext.jsx';\nimport { CartProvider } from './contexts/CartContext.jsx';\nimport { SettingsProvider } from './contexts/SettingsContext.jsx';\nimport { ChatIdProvider, useChatId } from './contexts/ChatIdContext.jsx';\nimport { API_BASE_URL } from './config/constants';\n\nconst AppContent = () => {\n  const chatId = useChatId();\n\n  return (\n    <ChatProvider apiEndpoint={API_BASE_URL}>\n      <CartProvider \n        apiEndpoint={API_BASE_URL}\n        onAddToCart={(cart) => console.log('Added to cart:', cart)}\n        chatId={chatId}\n      >\n        <SettingsProvider>\n          <ChatWidget \n            apiEndpoint={API_BASE_URL}\n            onAddToCart={(cart) => console.log('Added to cart:', cart)}\n          />\n        </SettingsProvider>\n      </CartProvider>\n    </ChatProvider>\n  );\n};\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <ConfigProvider>\n    <ChatIdProvider>\n      <AppContent />\n    </ChatIdProvider>\n  </ConfigProvider>\n);",
  "chat-widget-package/src/contexts/ChatContext.jsx": "import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport { message } from 'antd';\n\nconst ChatContext = createContext();\n\nexport const useChat = () => useContext(ChatContext);\n\nexport const ChatProvider = ({ children, apiEndpoint, chatId }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const chatEndRef = useRef(null);\n\n  const fetchLatestMessages = useCallback(async () => {\n    if (!chatId) {\n      console.log('ChatId not initialized yet');\n      return;\n    }\n    try {\n      console.log('Fetching messages for chatId:', chatId);\n      const response = await fetch(`${apiEndpoint}/chat/${chatId}/latest-messages`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"application/json\")) {\n        throw new Error(\"Oops! We haven't received a valid JSON response.\");\n      }\n      const data = await response.json();\n      console.log('Fetched messages:', data);\n      setMessages(data.messages || []);\n    } catch (error) {\n      console.error('Error fetching latest messages:', error);\n      setMessages([]);\n      message.error('Failed to load chat history. Please try again later.');\n    }\n  }, [apiEndpoint, chatId]);\n\n  const sendMessage = useCallback(async () => {\n    if (inputMessage.trim() !== '') {\n      console.log('Odesílání zprávy:', inputMessage);\n      setMessages(prevMessages => [...prevMessages, { role: 'user', content: inputMessage }]);\n      setInputMessage('');\n      setIsLoading(true);\n\n      try {\n        console.log('Volání API:', `${apiEndpoint}/chat/${chatId}`);\n        const response = await fetch(`${apiEndpoint}/chat/${chatId}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ user_query: inputMessage }),\n        });\n\n        console.log('API odpověď status:', response.status);\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder();\n\n        let accumulatedResponse = '';\n        while (true) {\n          const { value, done } = await reader.read();\n          if (done) break;\n          const chunk = decoder.decode(value, { stream: true });\n          console.log('Přijatý chunk:', chunk);\n\n          accumulatedResponse += chunk;\n          const lines = accumulatedResponse.split('\\n');\n          accumulatedResponse = lines.pop();\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              const jsonData = line.slice(5);\n              try {\n                const parsedData = JSON.parse(jsonData);\n                if (parsedData.text?.value) {\n                  setMessages(prevMessages => {\n                    const lastMessage = prevMessages[prevMessages.length - 1];\n                    if (lastMessage && lastMessage.role === 'assistant') {\n                      const updatedMessages = [...prevMessages];\n                      updatedMessages[updatedMessages.length - 1] = {\n                        ...lastMessage,\n                        content: lastMessage.content + parsedData.text.value\n                      };\n                      return updatedMessages;\n                    } else {\n                      return [...prevMessages, { role: 'assistant', content: parsedData.text.value }];\n                    }\n                  });\n                }\n              } catch (error) {\n                console.error('Chyba při parsování JSON:', error);\n              }\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Chyba při odesílání zprávy:', error);\n        setMessages(prevMessages => [...prevMessages, { role: 'error', content: 'Došlo k chybě při komunikaci se serverem.' }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [inputMessage, chatId, apiEndpoint]);\n\n  const startListening = useCallback(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.lang = 'cs-CZ';\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setInputMessage(transcript);\n      };\n      recognition.start();\n      setIsListening(true);\n      recognition.onend = () => setIsListening(false);\n    } else {\n      message.error('Speech recognition is not supported in your browser.');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (chatId) {\n      fetchLatestMessages();\n    }\n  }, [chatId, fetchLatestMessages]);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <ChatContext.Provider value={{\n      messages,\n      setMessages,\n      inputMessage,\n      setInputMessage,\n      isLoading,\n      isListening,\n      chatId,\n      chatEndRef,\n      fetchLatestMessages,\n      sendMessage,\n      startListening\n    }}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport default ChatProvider;",
  "chat-widget-package/src/contexts/SettingsContext.jsx": "// src/contexts/SettingsContext.js\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\nconst SettingsContext = createContext();\n\nexport const useSettings = () => useContext(SettingsContext);\n\nexport const SettingsProvider = ({ children }) => {\n  const [showSettings, setShowSettings] = useState(false);\n  const [voices, setVoices] = useState([]);\n  const [selectedVoice, setSelectedVoice] = useState(null);\n\n  useEffect(() => {\n    // Načtení dostupných hlasů\n    const loadVoices = () => {\n      const availableVoices = window.speechSynthesis.getVoices();\n      setVoices(availableVoices.filter(voice => voice.lang.startsWith('cs') || voice.lang.startsWith('en')));\n    };\n\n    loadVoices();\n    if (window.speechSynthesis.onvoiceschanged !== undefined) {\n      window.speechSynthesis.onvoiceschanged = loadVoices;\n    }\n  }, []);\n\n  const openSettings = useCallback(() => setShowSettings(true), []);\n  const closeSettings = useCallback(() => setShowSettings(false), []);\n\n  const changeVoice = useCallback((voice) => {\n    setSelectedVoice(voice);\n    // Zde můžete přidat logiku pro uložení preferovaného hlasu do localStorage\n  }, []);\n\n  const speakText = useCallback((text) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      if (selectedVoice) {\n        utterance.voice = selectedVoice;\n      }\n      window.speechSynthesis.speak(utterance);\n    }\n  }, [selectedVoice]);\n\n  return (\n    <SettingsContext.Provider value={{\n      showSettings,\n      openSettings,\n      closeSettings,\n      voices,\n      selectedVoice,\n      changeVoice,\n      speakText\n    }}>\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n\nexport default SettingsProvider;",
  "chat-widget-package/src/contexts/CartContext.jsx": "import React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport { message } from 'antd';\n\nconst CartContext = createContext();\n\nexport const useCart = () => useContext(CartContext);\n\nexport const CartProvider = ({ children, apiEndpoint, chatId }) => {\n  const [workingCart, setWorkingCart] = useState([]);\n  const [isCartLoading, setIsCartLoading] = useState(false);\n  const [isCartMinimized, setIsCartMinimized] = useState(false);\n\n  const fetchCart = useCallback(async () => {\n    if (!chatId) {\n      console.log('ChatId not initialized yet');\n      return;\n    }\n    setIsCartLoading(true);\n    try {\n      console.log('Fetching cart for chatId:', chatId);\n      console.log('API Endpoint:', apiEndpoint);\n      const response = await fetch(`${apiEndpoint}/cart/${chatId}`);\n      console.log('Full response:', response);\n  \n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n  \n      const responseText = await response.text();\n      console.log('Response text:', responseText);\n  \n      let cartData;\n      try {\n        cartData = JSON.parse(responseText);\n      } catch (error) {\n        console.error('Error parsing JSON:', error);\n        throw new Error('Invalid JSON response from server');\n      }\n  \n      console.log('Parsed cart data:', cartData);\n      if (cartData && cartData.data) {\n        const cartItems = Array.isArray(cartData.data) ? cartData.data : [cartData.data];\n        setWorkingCart(cartItems.map(item => ({\n          product_id: item.product_id,\n          name: item.name || 'Unnamed product',\n          price: item.price !== undefined ? item.price : 'N/A',\n          quantity: item.quantity || 1\n        })));\n      } else {\n        console.warn('Received cart data is not in expected format:', cartData);\n        setWorkingCart([]);\n      }\n    } catch (error) {\n      console.error('Error fetching cart:', error);\n      console.error('Full error object:', error);\n      setWorkingCart([]);\n      message.error('Failed to load cart data. Please try again later.');\n    } finally {\n      setIsCartLoading(false);\n    }\n  }, [apiEndpoint, chatId]);\n\n  const updateWorkingCart = useCallback((cartAction) => {\n    console.log('Updating cart with action:', cartAction);\n  \n    let parsedAction;\n    try {\n      parsedAction = typeof cartAction === 'string' ? JSON.parse(cartAction) : cartAction;\n    } catch (error) {\n      console.error('Chyba při parsování cartAction:', error);\n      return;\n    }\n  \n    console.log('Zpracování akce košíku:', parsedAction);\n  \n    if (!parsedAction || typeof parsedAction !== 'object') {\n      console.error('Neplatná struktura cartAction');\n      return;\n    }\n  \n    const { status, product_id, name, price, quantity } = parsedAction;\n  \n    setWorkingCart(prevCart => {\n      let updatedCart = [...prevCart];\n  \n      switch (status) {\n        case 'removed':\n          updatedCart = updatedCart.filter(item => item.product_id !== product_id);\n          break;\n        case 'added':\n        case 'updated':\n          const existingItemIndex = updatedCart.findIndex(item => item.product_id === product_id);\n          if (existingItemIndex !== -1) {\n            updatedCart[existingItemIndex] = {\n              ...updatedCart[existingItemIndex],\n              quantity: quantity ?? updatedCart[existingItemIndex].quantity + 1,\n              name: name || updatedCart[existingItemIndex].name,\n              price: price ?? updatedCart[existingItemIndex].price\n            };\n          } else {\n            updatedCart.push({\n              product_id,\n              name: name || 'Unnamed product',\n              price: price ?? 'N/A',\n              quantity: quantity ?? 1\n            });\n          }\n          break;\n        case 'cleared':\n          updatedCart = [];\n          break;\n        default:\n          console.warn(`Neznámá akce košíku: ${status}`);\n          return prevCart;\n      }\n  \n      console.log('Nový stav košíku:', updatedCart);\n      return updatedCart;\n    });\n  \n    // Zobrazení notifikace o změně košíku\n    switch (status) {\n      case 'removed':\n        message.success(`Položka ${product_id} odebrána z košíku`);\n        break;\n      case 'added':\n      case 'updated':\n        message.success(`Položka ${name || product_id} přidána/aktualizována v košíku`);\n        break;\n      case 'cleared':\n        message.success('Košík byl vyčištěn');\n        break;\n    }\n  \n    // Synchronizace s backendem\n    fetch(`${apiEndpoint}/cart/${chatId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(parsedAction),\n    })\n    .then(response => {\n      if (!response.ok) throw new Error('Failed to update cart on server');\n      return response.json();\n    })\n    .then(result => {\n      console.log('Cart updated on server:', result);\n      if (result.status === 'success') {\n        console.log('Server update successful, fetching latest cart data');\n        fetchCart(); // Získání aktuálního stavu košíku ze serveru\n      } else {\n        console.warn('Unexpected server response:', result);\n        // Možná budete chtít zde přidat nějakou dodatečnou logiku nebo notifikaci\n      }\n    })\n    .catch(error => {\n      console.error('Error updating cart on server:', error);\n      message.error('Failed to update cart on server. Please try again.');\n      // Zde můžete přidat logiku pro obnovení původního stavu košíku v případě chyby\n    });\n  \n    console.log('Aktualizace košíku dokončena');\n  }, [apiEndpoint, chatId, fetchCart]);\n\n  const cartSummary = useMemo(() => {\n    const totalItems = workingCart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = workingCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    const discount = 0; // Implement discount logic here if needed\n    const finalPrice = totalPrice - discount;\n    const saved = totalPrice - finalPrice;\n\n    return { totalItems, totalPrice, discount, finalPrice, saved };\n  }, [workingCart]);\n\n  const toggleCartMinimize = useCallback(() => {\n    setIsCartMinimized(prev => !prev);\n  }, []);\n\n  const handleCheckout = useCallback(() => {\n    if (workingCart.length === 0) {\n      message.warning('Košík je prázdný');\n      return;\n    }\n    // Zde by měla být implementace checkoutu, zatím jen logujeme\n    console.log('Checkout with items:', workingCart);\n    message.success('Objednávka byla úspěšně odeslána!');\n  }, [workingCart]);\n\n  useEffect(() => {\n    if (chatId) {\n      fetchCart();\n    }\n  }, [chatId, fetchCart]);\n\n  return (\n    <CartContext.Provider value={{\n      workingCart,\n      isCartLoading,\n      isCartMinimized,\n      cartSummary,\n      fetchCart,\n      updateWorkingCart,\n      toggleCartMinimize,\n      handleCheckout\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;",
  "chat-widget-package/src/contexts/ChatIdContext.jsx": "// src/contexts/ChatIdContext.jsx\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst ChatIdContext = createContext();\n\nexport const useChatId = () => useContext(ChatIdContext);\n\nexport const ChatIdProvider = ({ children }) => {\n  const [chatId, setChatId] = useState(null);\n\n  useEffect(() => {\n    const initializeChatId = () => {\n      try {\n        let storedChatId = localStorage.getItem('chatId') || sessionStorage.getItem('chatId');\n        if (storedChatId) {\n          console.log('Retrieved existing chatId:', storedChatId);\n          setChatId(storedChatId);\n        } else {\n          const newChatId = uuidv4();\n          console.log('Created new chatId:', newChatId);\n          try {\n            localStorage.setItem('chatId', newChatId);\n          } catch (e) {\n            sessionStorage.setItem('chatId', newChatId);\n          }\n          setChatId(newChatId);\n        }\n      } catch (error) {\n        console.error('Error accessing storage:', error);\n        const fallbackChatId = uuidv4();\n        console.log('Using fallback chatId:', fallbackChatId);\n        setChatId(fallbackChatId);\n      }\n    };\n\n    initializeChatId();\n  }, []);\n\n  return (\n    <ChatIdContext.Provider value={chatId}>\n      {children}\n    </ChatIdContext.Provider>\n  );\n};",
  "chat-widget-package/src/config/constants.js": "export const MOBILE_BREAKPOINT = 768;\nexport const DEFAULT_FONT_SIZE = 16;\nexport const API_BASE_URL = 'http://localhost:8000';\n// Přidejte další konstanty podle potřeby",
  "chat-widget-package/src/utils/helpers.js": "",
  "chat-widget-package/src/utils/__tests__/helpers.test.js": "",
  "chat-widget-package/src/utils/api/cart.js": "// /src/utils/api/cart.js\n\nexport const fetchCart = async (apiEndpoint, chatId) => {\n    try {\n      console.log('Fetching cart for chatId:', chatId);\n      const response = await fetch(`${apiEndpoint}/cart/${chatId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const cartData = await response.json();\n      console.log('Fetched cart data:', cartData);\n      if (cartData && cartData.data) {\n        return Array.isArray(cartData.data) ? cartData.data : [cartData.data];\n      } else {\n        console.warn('Received cart data is not in expected format:', cartData);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching cart:', error);\n      throw error;\n    }\n  };\n  \n  export const updateCart = async (apiEndpoint, chatId, cartAction) => {\n    try {\n      console.log('Updating cart with action:', cartAction);\n      const response = await fetch(`${apiEndpoint}/cart/${chatId}`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cartAction),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update cart on server');\n      }\n      const updatedCart = await response.json();\n      console.log('Cart updated on server:', updatedCart);\n      if (updatedCart && updatedCart.data) {\n        return Array.isArray(updatedCart.data) ? updatedCart.data : [updatedCart.data];\n      } else {\n        console.warn('Received updated cart data is not in expected format:', updatedCart);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error updating cart on server:', error);\n      throw error;\n    }\n  };\n  \n  export const calculateCartSummary = (workingCart) => {\n    const totalItems = workingCart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = workingCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    // Assume discount logic here - this should be implemented based on your business rules\n    const discount = 0; // For now, we're not applying any discount\n    const finalPrice = totalPrice - discount;\n    const saved = totalPrice - finalPrice;\n  \n    return { totalItems, totalPrice, discount, finalPrice, saved };\n  };",
  "chat-widget-package/src/utils/api/chat.js": "import { API_BASE_URL } from '../../config/constants';\n\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || 'API request failed');\n  }\n  return response.json();\n};\n\nexport const fetchLatestMessages = async (chatId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/chat/${chatId}/latest-messages`);\n    return handleResponse(response);\n  } catch (error) {\n    console.error('Error fetching latest messages:', error);\n    throw error;\n  }\n};\n\nexport const sendMessage = async (chatId, message) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/chat/${chatId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ user_query: message }),\n    });\n    return response; // Vracíme přímo response objekt pro zpracování streamu\n  } catch (error) {\n    console.error('Error sending message:', error);\n    throw error;\n  }\n};\n\nexport const processStreamResponse = async (response, onTextUpdate, onCartUpdate) => {\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n\n  let accumulatedResponse = '';\n  while (true) {\n    const { value, done } = await reader.read();\n    if (done) break;\n    const chunk = decoder.decode(value, { stream: true });\n\n    accumulatedResponse += chunk;\n    const lines = accumulatedResponse.split('\\n');\n    accumulatedResponse = lines.pop();\n\n    for (const line of lines) {\n      if (line.startsWith('data: ')) {\n        const jsonData = line.slice(5);\n        try {\n          const parsedData = JSON.parse(jsonData);\n          if (parsedData.text?.value) {\n            onTextUpdate(parsedData.text.value);\n          }\n          if (parsedData.cart_action) {\n            onCartUpdate(parsedData.cart_action);\n          }\n        } catch (error) {\n          console.error('Chyba při parsování JSON:', error);\n        }\n      }\n    }\n  }\n};",
  "chat-widget-package/src/styles/global.css": "",
  "chat-widget-package/src/components/CartSummary/CartSummary.module.css": "/* src/components/CartSummary/CartSummary.module.css */\n.cartSummary {\n    background-color: #f9fafb;\n    padding: 1rem;\n    border-radius: 0.5rem;\n    margin-bottom: 1rem;\n  }\n  \n  .cartSummary p {\n    margin-bottom: 0.5rem;\n  }",
  "chat-widget-package/src/components/CartSummary/CartSummary.jsx": "// src/components/CartSummary/CartSummary.jsx\nimport React from 'react';\nimport styles from './CartSummary.module.css';\n\nconst CartSummary = ({ summary }) => {\n  console.log('CartSummary rendering', summary);\n\n  if (!summary) {\n    return <div>Loading summary...</div>;\n  }\n\n  return (\n    <div className={styles.cartSummary}>\n      <p>Items: {summary.totalItems}</p>\n      <p>Total: ${summary.totalPrice.toFixed(2)}</p>\n      <p>Discount: ${summary.discount.toFixed(2)}</p>\n      <p>Final Price: ${summary.finalPrice.toFixed(2)}</p>\n      <p>You save: ${summary.saved.toFixed(2)}</p>\n    </div>\n  );\n};\n\nexport default React.memo(CartSummary);",
  "chat-widget-package/src/components/CartSummary/__tests__/CartSummary.test.jsx": "// src/components/CartSummary/__tests__/CartSummary.test.jsx\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport CartSummary from '../CartSummary';\n\ndescribe('CartSummary component', () => {\n  it('renders cart summary correctly', () => {\n    const props = {\n      totalItems: 5,\n      totalPrice: 100,\n      discount: 10,\n      finalPrice: 90,\n      saved: 10\n    };\n\n    render(<CartSummary {...props} />);\n\n    expect(screen.getByText('Items: 5')).toBeInTheDocument();\n    expect(screen.getByText('Total: $100.00')).toBeInTheDocument();\n    expect(screen.getByText('Discount: $10.00')).toBeInTheDocument();\n    expect(screen.getByText('Final Price: $90.00')).toBeInTheDocument();\n    expect(screen.getByText('You save: $10.00')).toBeInTheDocument();\n  });\n\n  it('does not render discount and saved amount when they are 0', () => {\n    const props = {\n      totalItems: 3,\n      totalPrice: 50,\n      discount: 0,\n      finalPrice: 50,\n      saved: 0\n    };\n\n    render(<CartSummary {...props} />);\n\n    expect(screen.getByText('Items: 3')).toBeInTheDocument();\n    expect(screen.getByText('Total: $50.00')).toBeInTheDocument();\n    expect(screen.getByText('Final Price: $50.00')).toBeInTheDocument();\n    expect(screen.queryByText('Discount:')).not.toBeInTheDocument();\n    expect(screen.queryByText('You save:')).not.toBeInTheDocument();\n  });\n});",
  "chat-widget-package/src/components/CartHeader/CartHeader.jsx": "import React from 'react';\nimport { Button, Tooltip } from 'antd';\nimport { LeftOutlined, RightOutlined, SettingOutlined } from '@ant-design/icons';\nimport { useCart } from '../../contexts/CartContext';\nimport './CartHeader.module.css';\n\nconst CartHeader = ({ onOpenSettings }) => {\n  const { isCartMinimized, toggleCartMinimize, cartSummary } = useCart();\n\n  return (\n    <div className=\"cart-header\">\n      Working Cart\n      <Tooltip title={isCartMinimized ? \"Expand cart\" : \"Minimize cart\"}>\n        <Button \n          className=\"minimize-button\" \n          icon={isCartMinimized ? <RightOutlined /> : <LeftOutlined />} \n          onClick={toggleCartMinimize} \n          aria-label={isCartMinimized ? \"Expand cart\" : \"Minimize cart\"}\n        />\n      </Tooltip>\n      <Tooltip title=\"Open settings\">\n        <Button \n          className=\"settings-button\" \n          icon={<SettingOutlined />} \n          onClick={onOpenSettings} \n          aria-label=\"Open settings\" \n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default CartHeader;",
  "chat-widget-package/src/components/CartHeader/CartHeader.module.css": "/* src/components/CartHeader/CartHeader.module.css */\n.cartHeader {\n    padding: 1rem;\n    background-color: #ffffff;\n    border-bottom: 1px solid #e5e7eb;\n    font-weight: bold;\n    font-size: 1.25rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .cartActions {\n    display: flex;\n    gap: 0.5rem;\n  }\n  \n  .minimizeButton,\n  .settingsButton {\n    padding: 0.5rem;\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    transition: background-color 0.2s;\n  }\n  \n  .minimizeButton:hover,\n  .settingsButton:hover {\n    background-color: #f3f4f6;\n  }",
  "chat-widget-package/src/components/CartHeader/__tests__/CartHeader.test.jsx": "// src/components/CartHeader/__tests__/CartHeader.test.jsx\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport CartHeader from '../CartHeader';\n\ndescribe('CartHeader component', () => {\n  it('renders cart header correctly when not minimized', () => {\n    const mockMinimize = jest.fn();\n    const mockOpenSettings = jest.fn();\n\n    render(\n      <CartHeader \n        isMinimized={false} \n        onMinimize={mockMinimize} \n        onOpenSettings={mockOpenSettings} \n      />\n    );\n\n    expect(screen.getByText('Working Cart')).toBeInTheDocument();\n    expect(screen.getByLabelText('Minimize cart')).toBeInTheDocument();\n    expect(screen.getByLabelText('Open settings')).toBeInTheDocument();\n  });\n\n  it('renders cart header correctly when minimized', () => {\n    const mockMinimize = jest.fn();\n    const mockOpenSettings = jest.fn();\n\n    render(\n      <CartHeader \n        isMinimized={true} \n        onMinimize={mockMinimize} \n        onOpenSettings={mockOpenSettings} \n      />\n    );\n\n    expect(screen.getByText('Working Cart')).toBeInTheDocument();\n    expect(screen.getByLabelText('Expand cart')).toBeInTheDocument();\n    expect(screen.getByLabelText('Open settings')).toBeInTheDocument();\n  });\n\n  it('calls onMinimize when minimize button is clicked', () => {\n    const mockMinimize = jest.fn();\n    const mockOpenSettings = jest.fn();\n\n    render(\n      <CartHeader \n        isMinimized={false} \n        onMinimize={mockMinimize} \n        onOpenSettings={mockOpenSettings} \n      />\n    );\n\n    fireEvent.click(screen.getByLabelText('Minimize cart'));\n    expect(mockMinimize).toHaveBeenCalledTimes(1);\n  });\n\n  it('calls onOpenSettings when settings button is clicked', () => {\n    const mockMinimize = jest.fn();\n    const mockOpenSettings = jest.fn();\n\n    render(\n      <CartHeader \n        isMinimized={false} \n        onMinimize={mockMinimize} \n        onOpenSettings={mockOpenSettings} \n      />\n    );\n\n    fireEvent.click(screen.getByLabelText('Open settings'));\n    expect(mockOpenSettings).toHaveBeenCalledTimes(1);\n  });\n});",
  "chat-widget-package/src/components/Message/Message.module.css": "/* src/components/Message/Message.module.css */\n.message {\n    max-width: 75%;\n    padding: 0.75rem 1rem;\n    margin-bottom: 1rem;\n    border-radius: 1rem;\n    position: relative;\n  }\n  \n  .user {\n    background-color: #e6f7ff;\n    margin-left: auto;\n    border-bottom-right-radius: 0;\n  }\n  \n  .assistant {\n    background-color: #f0f0f0;\n    margin-right: auto;\n    border-bottom-left-radius: 0;\n  }\n  \n  .error {\n    background-color: #ffd6d6;\n    margin-left: auto;\n    margin-right: auto;\n    border-radius: 1rem;\n  }",
  "chat-widget-package/src/components/Message/Message.jsx": "// src/components/Message/Message.jsx\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport styles from './Message.module.css';\n\nconst Message = React.memo(({ content, role }) => (\n  <div className={`${styles.message} ${styles[role]}`} role=\"listitem\">\n    <ReactMarkdown>{content || ''}</ReactMarkdown>\n  </div>\n));\n\nexport default Message;",
  "chat-widget-package/src/components/Message/__tests__/Message.test.jsx": "// src/components/Message/__tests__/Message.test.jsx\nimport React from 'react';\nimport { render, screen } from '@testing-library/react';\nimport Message from '../Message';\n\ndescribe('Message component', () => {\n  it('renders user message correctly', () => {\n    render(<Message content=\"Hello, world!\" role=\"user\" />);\n    expect(screen.getByText('Hello, world!')).toBeInTheDocument();\n    expect(screen.getByRole('listitem')).toHaveClass('user');\n  });\n\n  it('renders assistant message correctly', () => {\n    render(<Message content=\"How can I help you?\" role=\"assistant\" />);\n    expect(screen.getByText('How can I help you?')).toBeInTheDocument();\n    expect(screen.getByRole('listitem')).toHaveClass('assistant');\n  });\n\n  it('renders markdown content correctly', () => {\n    render(<Message content=\"**Bold** and *italic*\" role=\"user\" />);\n    expect(screen.getByText('Bold')).toHaveStyle('font-weight: bold');\n    expect(screen.getByText('italic')).toHaveStyle('font-style: italic');\n  });\n});",
  "chat-widget-package/src/components/ChatWidget/README.md": "",
  "chat-widget-package/src/components/ChatWidget/ChatWidget.jsx": "// src/components/ChatWidget/ChatWidget.jsx\nimport React from 'react';\nimport ChatDesktop from './ChatDesktop';\nimport ChatMobile from './ChatMobile';\nimport { useChat } from '../../contexts/ChatContext';\nimport { useSettings } from '../../contexts/SettingsContext';\nimport useResponsive from '../../hooks/useResponsive';\nimport styles from './ChatWidget.module.css';\n\nconst ChatWidget = ({ customStyles }) => {\n  const { isMobile } = useResponsive();\n  const { \n    messages, \n    isLoading, \n    chatEndRef \n  } = useChat();\n\n  const { \n    openSettings\n  } = useSettings();\n\n  return (\n    <div className={styles.chatWidget} style={customStyles}>\n      {isMobile ? (\n        <ChatMobile \n          messages={messages}\n          isLoading={isLoading}\n          chatEndRef={chatEndRef}\n          onOpenSettings={openSettings}\n          customStyles={customStyles}\n        />\n      ) : (\n        <ChatDesktop \n          messages={messages}\n          isLoading={isLoading}\n          chatEndRef={chatEndRef}\n          onOpenSettings={openSettings}\n          customStyles={customStyles}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ChatWidget;",
  "chat-widget-package/src/components/ChatWidget/useChatWidget.js": "// src/components/ChatWidget/useChatWidget.js\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { message } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport { fetchLatestMessages, fetchCart, sendMessage as apiSendMessage } from '../../utils/api/chat';\nimport { updateCart } from '../../utils/api/cart';\nimport useSpeechRecognition from '../../hooks/useSpeechRecognition';\n\nconst useChatWidget = (apiEndpoint, onAddToCart) => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [workingCart, setWorkingCart] = useState([]);\n  const [chatId, setChatId] = useState(null);\n  const [isInitializing, setIsInitializing] = useState(true);\n  const [isCartLoading, setIsCartLoading] = useState(true);\n  const [cartSummary, setCartSummary] = useState({ totalItems: 0, totalPrice: 0, discount: 0, finalPrice: 0, saved: 0 });\n  const [isCartMinimized, setIsCartMinimized] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const chatEndRef = useRef(null);\n\n  const { isListening, startListening } = useSpeechRecognition();\n\n  useEffect(() => {\n    const initializeChatId = () => {\n      try {\n        let storedChatId = localStorage.getItem('chatId') || sessionStorage.getItem('chatId');\n        if (storedChatId) {\n          console.log('Retrieved existing chatId:', storedChatId);\n          setChatId(storedChatId);\n        } else {\n          const newChatId = uuidv4();\n          console.log('Created new chatId:', newChatId);\n          try {\n            localStorage.setItem('chatId', newChatId);\n          } catch (e) {\n            sessionStorage.setItem('chatId', newChatId);\n          }\n          setChatId(newChatId);\n        }\n      } catch (error) {\n        console.error('Error accessing storage:', error);\n        const fallbackChatId = uuidv4();\n        console.log('Using fallback chatId:', fallbackChatId);\n        setChatId(fallbackChatId);\n      }\n    };\n\n    initializeChatId();\n  }, []);\n\n  useEffect(() => {\n    if (chatId) {\n      Promise.all([fetchLatestMessages(apiEndpoint, chatId), fetchCart(apiEndpoint, chatId)])\n        .then(([messagesData, cartData]) => {\n          setMessages(messagesData.messages || []);\n          setWorkingCart(Array.isArray(cartData.data) ? cartData.data : [cartData.data]);\n        })\n        .catch(error => {\n          console.error('Error fetching initial data:', error);\n          message.error('Failed to load initial data');\n        })\n        .finally(() => {\n          setIsInitializing(false);\n          setIsCartLoading(false);\n        });\n    }\n  }, [chatId, apiEndpoint]);\n\n  useEffect(() => {\n    updateCartSummary();\n  }, [workingCart]);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const updateCartSummary = useCallback(() => {\n    const totalItems = workingCart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = workingCart.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n    const discount = 0; // Implement discount logic here if needed\n    const finalPrice = totalPrice - discount;\n    const saved = totalPrice - finalPrice;\n\n    setCartSummary({ totalItems, totalPrice, discount, finalPrice, saved });\n  }, [workingCart]);\n\n  const sendMessage = useCallback(async () => {\n    if (inputMessage.trim() !== '') {\n      setMessages(prevMessages => [...prevMessages, { role: 'user', content: inputMessage }]);\n      setInputMessage('');\n      setIsLoading(true);\n\n      try {\n        const response = await apiSendMessage(apiEndpoint, chatId, inputMessage);\n        let accumulatedResponse = '';\n        for await (const chunk of response) {\n          accumulatedResponse += chunk;\n          try {\n            const parsedData = JSON.parse(accumulatedResponse);\n            if (parsedData.text?.value) {\n              setMessages(prevMessages => {\n                const lastMessage = prevMessages[prevMessages.length - 1];\n                if (lastMessage && lastMessage.role === 'assistant') {\n                  const updatedMessages = [...prevMessages];\n                  updatedMessages[updatedMessages.length - 1] = {\n                    ...lastMessage,\n                    content: lastMessage.content + parsedData.text.value\n                  };\n                  return updatedMessages;\n                } else {\n                  return [...prevMessages, { role: 'assistant', content: parsedData.text.value }];\n                }\n              });\n            }\n            if (parsedData.cart_action) {\n              updateWorkingCart(parsedData.cart_action);\n            }\n            accumulatedResponse = '';\n          } catch (error) {\n            // Incomplete JSON, continue accumulating\n          }\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n        setMessages(prevMessages => [...prevMessages, { role: 'error', content: 'An error occurred while communicating with the server.' }]);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  }, [inputMessage, chatId, apiEndpoint]);\n\n  const updateWorkingCart = useCallback(async (cartAction) => {\n    try {\n      const updatedCart = await updateCart(apiEndpoint, chatId, cartAction);\n      setWorkingCart(Array.isArray(updatedCart.data) ? updatedCart.data : [updatedCart.data]);\n      message.success(`Cart updated: ${cartAction.status}`);\n    } catch (error) {\n      console.error('Error updating cart:', error);\n      message.error('Failed to update cart');\n    }\n  }, [apiEndpoint, chatId]);\n\n  const handleCheckout = useCallback(() => {\n    if (workingCart.length === 0) {\n      message.warning('Cart is empty');\n      return;\n    }\n    onAddToCart(workingCart);\n    message.success('Items were successfully added to the main cart!');\n  }, [workingCart, onAddToCart]);\n\n  const handleVoiceInput = useCallback(async () => {\n    const transcript = await startListening();\n    if (transcript) {\n      setInputMessage(prevMessage => prevMessage + ' ' + transcript);\n    }\n  }, [startListening]);\n\n  const toggleCartMinimize = useCallback(() => {\n    setIsCartMinimized(prev => !prev);\n  }, []);\n\n  const openSettings = useCallback(() => {\n    setShowSettings(true);\n  }, []);\n\n  const closeSettings = useCallback(() => {\n    setShowSettings(false);\n  }, []);\n\n  return {\n    messages,\n    setMessages,\n    inputMessage,\n    setInputMessage,\n    isLoading,\n    workingCart,\n    chatId,\n    isInitializing,\n    isCartLoading,\n    cartSummary,\n    isCartMinimized,\n    showSettings,\n    chatEndRef,\n    isListening,\n    sendMessage,\n    updateWorkingCart,\n    handleCheckout,\n    handleVoiceInput,\n    toggleCartMinimize,\n    openSettings,\n    closeSettings,\n  };\n};\n\nexport default useChatWidget;",
  "chat-widget-package/src/components/ChatWidget/ChatDesktop.jsx": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, Select } from 'antd';\nimport Message from '../Message/Message';\nimport CartItem from '../CartItem/CartItem';\nimport ChatInput from '../ChatInput/ChatInput';\nimport CartHeader from '../CartHeader/CartHeader';\nimport CartSummary from '../CartSummary/CartSummary';\nimport { useChat } from '../../contexts/ChatContext';\nimport { useCart } from '../../contexts/CartContext';\nimport { useSettings } from '../../contexts/SettingsContext';\nimport styles from './ChatWidget.module.css';\n\nconst { Option } = Select;\n\nconst ChatDesktop = ({ customStyles }) => {\n  const { \n    messages, \n    isLoading, \n    chatEndRef \n  } = useChat();\n\n  const { \n    workingCart, \n    isCartMinimized, \n    handleCheckout \n  } = useCart();\n\n  const { \n    showSettings, \n    openSettings, \n    closeSettings, \n    voices, \n    selectedVoice, \n    changeVoice \n  } = useSettings();\n\n  return (\n    <div className={styles.chatWidget} style={customStyles}>\n      <div className={styles.chatColumn}>\n        <div className={styles.chatHeader}>Chat with Assistant</div>\n        <div className={styles.chatMessages}>\n          {messages.map((message, index) => (\n            <Message key={index} content={message.content} role={message.role} />\n          ))}\n          <div ref={chatEndRef} />\n        </div>\n        <ChatInput />\n      </div>\n      <div className={`${styles.cartColumn} ${isCartMinimized ? styles.minimized : ''}`}>\n        <CartHeader onOpenSettings={openSettings} />\n        {!isCartMinimized && (\n          <>\n            <div className={styles.cartItems}>\n              {workingCart.map((item) => (\n                <CartItem key={item.product_id} item={item} />\n              ))}\n            </div>\n            <CartSummary />\n            <Button \n              onClick={handleCheckout} \n              className={styles.checkoutButton}\n            >\n              Buy in e-shop\n            </Button>\n          </>\n        )}\n      </div>\n      <Modal\n        title=\"Settings\"\n        visible={showSettings}\n        onCancel={closeSettings}\n        footer={null}\n      >\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"Select a voice\"\n          value={selectedVoice ? selectedVoice.name : undefined}\n          onChange={(value) => changeVoice(voices.find(v => v.name === value))}\n        >\n          {voices.map((voice) => (\n            <Option key={voice.name} value={voice.name}>{voice.name}</Option>\n          ))}\n        </Select>\n      </Modal>\n    </div>\n  );\n};\n\nChatDesktop.propTypes = {\n  customStyles: PropTypes.object\n};\n\nexport default ChatDesktop;",
  "chat-widget-package/src/components/ChatWidget/ChatWidget.module.css": ".chatWidget {\n    display: flex;\n    height: 100vh;\n    background-color: #f3f4f6;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n  \n  .chatColumn {\n    flex: 2;\n    display: flex;\n    flex-direction: column;\n    border-right: 1px solid #e5e7eb;\n    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);\n  }\n  \n  .cartColumn {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    background-color: #ffffff;\n    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .cartColumn.minimized {\n    transform: translateX(calc(100% - 60px));\n  }\n  \n  .chatHeader, .cartHeader {\n    padding: 1rem;\n    background-color: #ffffff;\n    border-bottom: 1px solid #e5e7eb;\n    font-weight: bold;\n    font-size: 1.25rem;\n  }\n  \n  .chatMessages, .cartItems {\n    flex: 1;\n    overflow-y: auto;\n    padding: 1rem;\n  }\n  \n  .message {\n    margin-bottom: 1rem;\n    padding: 0.5rem 1rem;\n    border-radius: 8px;\n    max-width: 80%;\n  }\n  \n  .userMessage {\n    background-color: #e2e8f0;\n    align-self: flex-end;\n  }\n  \n  .assistantMessage {\n    background-color: #bfdbfe;\n    align-self: flex-start;\n  }\n  \n  .cartItem {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid #e5e7eb;\n  }\n  \n  .itemDetails {\n    flex: 1;\n  }\n  \n  .itemActions {\n    display: flex;\n    gap: 0.5rem;\n  }\n  \n  .cartSummary {\n    margin-top: auto;\n    padding: 1rem;\n    background-color: #f3f4f6;\n    border-top: 1px solid #e5e7eb;\n  }\n  \n  .checkoutButton {\n    width: 100%;\n    margin-top: 1rem;\n    padding: 0.5rem;\n    background-color: #3b82f6;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .checkoutButton:hover {\n    background-color: #2563eb;\n  }\n  \n  .chatInput {\n    display: flex;\n    padding: 1rem;\n    background-color: #ffffff;\n    border-top: 1px solid #e5e7eb;\n  }\n  \n  .chatInput input {\n    flex: 1;\n    padding: 0.5rem;\n    border: 1px solid #e5e7eb;\n    border-radius: 4px;\n  }\n  \n  .chatInput button {\n    margin-left: 0.5rem;\n    padding: 0.5rem 1rem;\n    background-color: #3b82f6;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .chatInput button:hover {\n    background-color: #2563eb;\n  }\n\n  .chatWidget {\n    display: flex;\n    height: 100vh;\n    background-color: #f3f4f6;\n  }\n  \n  .chatColumn {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    border-right: 1px solid #e5e7eb;\n  }\n  \n  .cartColumn {\n    width: 300px; /* Pevná šířka pro sloupec košíku */\n    padding: 20px; /* Přidaný padding */\n    background-color: #ffffff;\n    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n    overflow-y: auto; /* Přidáno pro scrollování při přetečení obsahu */\n  }\n  \n  /* Zajistí, že košík zůstane vpravo i při zmenšení okna */\n  @media (max-width: 768px) {\n    .chatWidget {\n      flex-direction: column;\n    }\n  \n    .cartColumn {\n      width: 100%;\n      order: -1; /* Přesune košík nahoru na mobilních zařízeních */\n    }\n  }",
  "chat-widget-package/src/components/ChatWidget/ChatMobile.jsx": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs, Button, Modal, Select } from 'antd';\nimport Message from '../Message/Message';\nimport CartItem from '../CartItem/CartItem';\nimport ChatInput from '../ChatInput/ChatInput';\nimport CartHeader from '../CartHeader/CartHeader';\nimport CartSummary from '../CartSummary/CartSummary';\nimport { useChat } from '../../contexts/ChatContext';\nimport { useCart } from '../../contexts/CartContext';\nimport { useSettings } from '../../contexts/SettingsContext';\nimport styles from './ChatWidget.module.css';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst ChatMobile = ({ customStyles, apiEndpoint }) => {\n  const [activeTab, setActiveTab] = useState('chat');\n  \n  const { \n    messages, \n    isLoading, \n    chatEndRef \n  } = useChat();\n\n  const { \n    workingCart, \n    cartSummary,\n    handleCheckout \n  } = useCart();\n\n  const { \n    showSettings, \n    openSettings, \n    closeSettings, \n    voices, \n    selectedVoice, \n    changeVoice \n  } = useSettings();\n\n  return (\n    <div className={styles.chatWidgetMobile} style={customStyles}>\n      <Tabs activeKey={activeTab} onChange={setActiveTab}>\n        <TabPane tab=\"Chat\" key=\"chat\">\n          <div className={styles.chatColumn}>\n            <div className={styles.chatMessages}>\n              {messages.map((message, index) => (\n                <Message key={index} content={message.content} role={message.role} />\n              ))}\n              <div ref={chatEndRef} />\n            </div>\n            <ChatInput />\n          </div>\n        </TabPane>\n        <TabPane tab={`Cart (${cartSummary.totalItems})`} key=\"cart\">\n          <div className={styles.cartColumn}>\n            <CartHeader onOpenSettings={openSettings} />\n            <div className={styles.cartItems}>\n              {workingCart.map((item) => (\n                <CartItem key={item.product_id} item={item} />\n              ))}\n            </div>\n            <CartSummary />\n            <Button \n              onClick={handleCheckout} \n              className={styles.checkoutButton}\n            >\n              Buy in e-shop ({cartSummary.totalItems} items)\n            </Button>\n          </div>\n        </TabPane>\n      </Tabs>\n      \n      <Modal\n        title=\"Settings\"\n        visible={showSettings}\n        onCancel={closeSettings}\n        footer={null}\n      >\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"Select a voice\"\n          value={selectedVoice ? selectedVoice.name : undefined}\n          onChange={(value) => changeVoice(voices.find(v => v.name === value))}\n        >\n          {voices.map((voice) => (\n            <Option key={voice.name} value={voice.name}>{voice.name}</Option>\n          ))}\n        </Select>\n      </Modal>\n    </div>\n  );\n};\n\nChatMobile.propTypes = {\n  customStyles: PropTypes.object,\n  apiEndpoint: PropTypes.string.isRequired\n};\n\nexport default ChatMobile;",
  "chat-widget-package/src/components/ChatWidget/__tests__/ChatWidget.test.jsx": "",
  "chat-widget-package/src/components/ChatWidget/__tests__/ChatDesktop.test.jsx": "",
  "chat-widget-package/src/components/ChatWidget/__tests__/ChatMobile.test.jsx": "",
  "chat-widget-package/src/components/ChatInput/ChatInput.jsx": "// src/components/ChatInput/ChatInput.jsx\nimport React from 'react';\nimport { Input, Button, Tooltip } from 'antd';\nimport { SendOutlined, AudioOutlined } from '@ant-design/icons';\nimport { useChat } from '../../contexts/ChatContext';\nimport styles from './ChatInput.module.css';\n\nconst ChatInput = () => {\n  const { \n    inputMessage, \n    setInputMessage, \n    sendMessage, \n    isLoading, \n    isListening, \n    handleVoiceInput \n  } = useChat();\n\n  const handleSend = () => {\n    if (inputMessage.trim()) {\n      sendMessage(inputMessage);\n      setInputMessage('');\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className={styles.chatInput}>\n      <Input\n        value={inputMessage}\n        onChange={(e) => setInputMessage(e.target.value)}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Type a message...\"\n        disabled={isLoading}\n      />\n      <div className={styles.chatInputButtons}>\n        <Tooltip title=\"Send message\">\n          <Button\n            icon={<SendOutlined />}\n            onClick={handleSend}\n            loading={isLoading}\n          />\n        </Tooltip>\n        <Tooltip title={isListening ? \"Listening...\" : \"Start voice input\"}>\n          <Button\n            icon={<AudioOutlined />}\n            onClick={handleVoiceInput}\n            loading={isListening}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(ChatInput);",
  "chat-widget-package/src/components/ChatInput/ChatInput.module.css": ".chatInput {\n    display: flex;\n    align-items: center;\n    padding: 1rem;\n    background-color: #ffffff;\n    border-top: 1px solid #e5e7eb;\n  }\n  \n  .chatInput :global(.ant-input) {\n    flex: 1;\n    margin-right: 0.5rem;\n  }\n  \n  .chatInputButtons {\n    display: flex;\n    justify-content: flex-end;\n  }\n  \n  .chatInputButtons :global(.ant-btn) {\n    margin-left: 0.5rem;\n  }",
  "chat-widget-package/src/components/ChatInput/__tests__/ChatInput.test.jsx": "// src/components/ChatInput/__tests__/ChatInput.test.jsx\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport ChatInput from '../ChatInput';\n\ndescribe('ChatInput component', () => {\n  const mockSetInputMessage = jest.fn();\n  const mockSendMessage = jest.fn();\n  const mockHandleVoiceInput = jest.fn();\n\n  const defaultProps = {\n    inputMessage: '',\n    setInputMessage: mockSetInputMessage,\n    sendMessage: mockSendMessage,\n    isLoading: false,\n    isListening: false,\n    handleVoiceInput: mockHandleVoiceInput\n  };\n\n  it('renders input field and buttons correctly', () => {\n    render(<ChatInput {...defaultProps} />);\n\n    expect(screen.getByLabelText('Message input')).toBeInTheDocument();\n    expect(screen.getByLabelText('Send message')).toBeInTheDocument();\n    expect(screen.getByLabelText('Start voice input')).toBeInTheDocument();\n  });\n\n  it('updates input message when typing', () => {\n    render(<ChatInput {...defaultProps} />);\n    const input = screen.getByLabelText('Message input');\n\n    fireEvent.change(input, { target: { value: 'Hello' } });\n    expect(mockSetInputMessage).toHaveBeenCalledWith('Hello');\n  });\n\n  it('calls sendMessage when send button is clicked', () => {\n    render(<ChatInput {...defaultProps} />);\n    const sendButton = screen.getByLabelText('Send message');\n\n    fireEvent.click(sendButton);\n    expect(mockSendMessage).toHaveBeenCalledTimes(1);\n  });\n\n  it('calls handleVoiceInput when voice button is clicked', () => {\n    render(<ChatInput {...defaultProps} />);\n    const voiceButton = screen.getByLabelText('Start voice input');\n\n    fireEvent.click(voiceButton);\n    expect(mockHandleVoiceInput).toHaveBeenCalledTimes(1);\n  });\n\n  it('disables input when isLoading is true', () => {\n    render(<ChatInput {...defaultProps} isLoading={true} />);\n    const input = screen.getByLabelText('Message input');\n\n    expect(input).toBeDisabled();\n  });\n\n  it('shows \"Listening...\" tooltip when isListening is true', () => {\n    render(<ChatInput {...defaultProps} isListening={true} />);\n    const voiceButton = screen.getByLabelText('Start voice input');\n\n    expect(voiceButton).toHaveAttribute('title', 'Listening...');\n  });\n});",
  "chat-widget-package/src/components/CartItem/CartItem.module.css": "/* src/components/CartItem/CartItem.module.css */\n.cartItem {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.75rem 0;\n    border-bottom: 1px solid #e5e7eb;\n  }\n  \n  .itemDetails {\n    flex-grow: 1;\n  }\n  \n  .itemActions {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n  }",
  "chat-widget-package/src/components/CartItem/CartItem.jsx": "import React from 'react';\nimport { Button } from 'antd';\nimport { PlusOutlined, MinusOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { useCart } from '../../contexts/CartContext';\nimport styles from './CartItem.module.css';\n\nconst CartItem = ({ item }) => {\n  const { updateWorkingCart } = useCart();\n\n  console.log('Rendering CartItem:', item);  // Přidáno pro debugování\n\n  const handleUpdateQuantity = (newQuantity) => {\n    console.log('Updating quantity:', { productId: item.product_id, newQuantity });  // Přidáno pro debugování\n    updateWorkingCart({\n      status: 'updated',\n      product_id: item.product_id,\n      name: item.name,\n      price: item.price,\n      quantity: newQuantity\n    });\n  };\n\n  const handleRemove = () => {\n    console.log('Removing item:', item.product_id);  // Přidáno pro debugování\n    updateWorkingCart({\n      status: 'removed',\n      product_id: item.product_id\n    });\n  };\n\n  return (\n    <div className={styles.cartItem} role=\"listitem\">\n      <div className={styles.itemDetails}>\n        <p>{item.name || 'Unnamed product'} - {item.price !== undefined && item.price !== null ? `$${item.price}` : 'N/A'}</p>\n        <p>{item.quantity}x {item.price !== undefined && item.price !== null ? `$${(item.price * item.quantity).toFixed(2)}` : 'N/A'}</p>\n      </div>\n      <div className={styles.itemActions}>\n        <Button \n          icon={<MinusOutlined />} \n          onClick={() => handleUpdateQuantity(item.quantity - 1)} \n          disabled={item.quantity <= 1}\n          aria-label={`Decrease quantity of ${item.name || 'product'}`} \n        />\n        <Button \n          icon={<PlusOutlined />} \n          onClick={() => handleUpdateQuantity(item.quantity + 1)} \n          aria-label={`Increase quantity of ${item.name || 'product'}`} \n        />\n        <Button \n          icon={<DeleteOutlined />} \n          onClick={handleRemove} \n          aria-label={`Remove ${item.name || 'product'} from cart`} \n        />\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(CartItem);",
  "chat-widget-package/src/components/CartItem/__tests__/CartItem.test.jsx": "",
  "chat-widget-package/src/components/CartColumn/CartColumn.module.css": "/* src/components/CartColumn/CartColumn.module.css */\n.cartColumn {\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    background-color: #ffffff;\n    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n    transition: transform 0.3s ease-in-out;\n    max-width: 350px;\n  }\n  \n  .minimized {\n    transform: translateX(calc(100% - 60px));\n  }\n  \n  .cartContent {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    padding: 1rem;\n  }\n  \n  .cartItems {\n    flex: 1;\n    overflow-y: auto;\n    margin-bottom: 1rem;\n  }\n  \n  .cartFooter {\n    border-top: 1px solid #e5e7eb;\n    padding-top: 1rem;\n  }\n  \n  .checkoutButton {\n    width: 100%;\n    margin-top: 1rem;\n  }",
  "chat-widget-package/src/components/CartColumn/CartColumn.jsx": "// src/components/CartColumn/CartColumn.jsx\nimport React from 'react';\nimport { Button, Spin } from 'antd';\nimport CartHeader from '../CartHeader/CartHeader';\nimport CartItem from '../CartItem/CartItem';\nimport CartSummary from '../CartSummary/CartSummary';\nimport { useCart } from '../../contexts/CartContext';\nimport styles from './CartColumn.module.css';\n\nconst CartColumn = ({ onOpenSettings }) => {\n  const { \n    workingCart, \n    isCartMinimized,\n    isCartLoading,\n    cartSummary,\n    handleCheckout,\n    toggleCartMinimize\n  } = useCart();\n\n  console.log('CartColumn rendering', { workingCart, isCartMinimized, cartSummary, isCartLoading });\n  console.log('workingCart:', workingCart);\n  console.log('cartSummary:', cartSummary);\n\n  const renderCartContent = () => {\n    if (isCartLoading) {\n      return <Spin tip=\"Loading cart...\"/>;\n    }\n    if (workingCart.length === 0) {\n      return (\n        <div className={styles.emptyCart}>\n          <p>Your cart is empty</p>\n          <p>Add some items to get started!</p>\n        </div>\n      );\n    }\n    return workingCart.map((item) => (\n      <CartItem key={item.product_id} item={item} />\n    ));\n  };\n\n  return (\n    <div className={`${styles.cartColumn} ${isCartMinimized ? styles.minimized : ''}`}>\n      <CartHeader onOpenSettings={onOpenSettings} />\n      <div className={styles.cartContent}>\n        <div className={styles.cartItems}>\n          {renderCartContent()}\n        </div>\n        <div className={styles.cartFooter}>\n          <CartSummary summary={cartSummary} />\n          <Button \n            className={styles.checkoutButton}\n            onClick={handleCheckout}\n            disabled={workingCart.length === 0 || isCartLoading}\n          >\n            Buy in e-shop ({cartSummary?.totalItems ?? 0} items)\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CartColumn;",
  "chat-widget-package/src/__tests__/integration/ChatWidget.test.jsx": "",
  "chat-widget-package/src/hooks/useSpeechRecognition.js": "// src/hooks/useSpeechRecognition.js\nimport { useState, useCallback } from 'react';\n\nconst useSpeechRecognition = () => {\n  const [isListening, setIsListening] = useState(false);\n\n  const startListening = useCallback(() => {\n    if ('webkitSpeechRecognition' in window) {\n      const recognition = new window.webkitSpeechRecognition();\n      recognition.lang = 'cs-CZ';\n      recognition.onstart = () => setIsListening(true);\n      recognition.onresult = (event) => {\n        const transcript = event.results[0][0].transcript;\n        setIsListening(false);\n        return transcript;\n      };\n      recognition.onerror = (event) => {\n        console.error('Speech recognition error', event.error);\n        setIsListening(false);\n      };\n      recognition.onend = () => setIsListening(false);\n      recognition.start();\n    } else {\n      console.error('Speech recognition is not supported in your browser.');\n    }\n  }, []);\n\n  return { isListening, startListening };\n};\n\nexport default useSpeechRecognition;",
  "chat-widget-package/src/hooks/useErrorHandler.js": "// src/hooks/useErrorHandler.js\nimport { useState, useCallback } from 'react';\n\nconst useErrorHandler = () => {\n  const [error, setError] = useState(null);\n\n  const handleError = useCallback((error) => {\n    console.error('An error occurred:', error);\n    setError(error.message || 'An unexpected error occurred');\n    // You could also send the error to a logging service here\n  }, []);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return { error, handleError, clearError };\n};\n\nexport default useErrorHandler;",
  "chat-widget-package/src/hooks/useResponsive.js": "import { useState, useEffect } from 'react';\n\nconst useResponsive = () => {\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return { isMobile };\n};\n\nexport default useResponsive;",
  "chat-widget-package/src/hooks/useChatState.js": "",
  "chat-widget-package/src/hooks/useCartState.js": "",
  "chat-widget-package/src/hooks/__tests__/useSpeechRecognition.test.js": "",
  "chat-widget-package/src/hooks/__tests__/useCartState.test.js": "",
  "chat-widget-package/src/hooks/__tests__/useResponsive.test.js": "",
  "chat-widget-package/src/hooks/__tests__/useChatState.test.js": ""
}